#!/bin/bash
HR="###########################################################################"
export BUILD_RECIPE=${1:-"../snapshot.time"}
export RELEASE_DATE=""
export HYRAX_VERSION=""
export OLFS_VERSION=""
export BES_VERSION=""
export LIBDAP_VERSION=""

export S3_BUILD_BUCKET=${S3_BUILD_BUCKET:-"opendap.travis.build"}
export DOCKER_NAME=${DOCKER_NAME:-"hyrax"}
export TOMCAT_MAJOR_VERSION=${TOMCAT_MAJOR_VERSION:-"9"}
export SLEEP_INTERVAL=${SLEEP_INTERVAL:-60}
export NO_CACHE=${NO_CACHE:-""}
export RELEASE_DATE=${RELEASE_DATE:-$(cat "${BUILD_RECIPE}" | grep hyrax | awk '{print $2;}')}
export HYRAX_VERSION=${HYRAX_VERSION:-$(cat "${BUILD_RECIPE}" | grep hyrax | awk '{print $1;}' | sed "s/hyrax-//g" )}
export OLFS_VERSION=${OLFS_VERSION:-$(cat "${BUILD_RECIPE}" | grep olfs | sed "s/olfs-//g" | awk '{print $1;}')}
export BES_VERSION=${BES_VERSION:-$(cat "${BUILD_RECIPE}" | grep bes | sed "s/bes-//g" | awk '{print $1;}')}
export LIBDAP_VERSION=${LIBDAP_VERSION:-$(cat "${BUILD_RECIPE}" | grep libdap4 | sed "s/libdap4-//g"| awk '{print $1;}')}

export SNAPSHOT_IMAGE_TAG=${SNAPSHOT_IMAGE_TAG:-"opendap/${DOCKER_NAME}:snapshot"}
export BUILD_VERSION_TAG=${BUILD_VERSION_TAG:-"opendap/${DOCKER_NAME}:${HYRAX_VERSION}"}

export RELEASE_HOST=${RELEASE_HOST:-"https://www.opendap.org/pub/"}


function show_version(){
    echo "${HR}" >&2
    echo "#         RELEASE_DATE: ${RELEASE_DATE}" >&2
    echo "#        HYRAX_VERSION: ${HYRAX_VERSION}" >&2
    echo "#         OLFS_VERSION: ${OLFS_VERSION}" >&2
    echo "#          BES_VERSION: ${BES_VERSION}" >&2
    echo "#       LIBDAP_VERSION: ${LIBDAP_VERSION}" >&2
    echo "#          DOCKER_NAME: ${DOCKER_NAME}" >&2
    echo "#    BUILD_VERSION_TAG: ${BUILD_VERSION_TAG}" >&2
    echo "#   SNAPSHOT_IMAGE_TAG: ${SNAPSHOT_IMAGE_TAG}" >&2
    echo "#      S3_BUILD_BUCKET: ${S3_BUILD_BUCKET}" >&2
    echo "#       SLEEP_INTERVAL: ${SLEEP_INTERVAL}" >&2
    echo "#" >&2
    echo "# TOMCAT_MAJOR_VERSION: ${TOMCAT_MAJOR_VERSION}" >&2
    echo "#       TOMCAT_VERSION: ${TOMCAT_VERSION}" >&2
    echo "#" >&2
    echo "#             NO_CACHE: ${NO_CACHE}" >&2
    echo "#" >&2
    echo "#" >&2
}

################################################################################
#
# get_latest_tomcat_version_number()
#
# Using the passed tomcat_major_version this function uses the Tomcat GitHub
# repo to find the most recent release for that major version, and then checks
# to make sure that the release is available from the Tomcat download server.
# If the version is not available on the download server, the release is
# discarded and the next most recent release is chosen.
#
function get_latest_tomcat_version_number(){
    local tomcat_major_version="${1}"

    local release_endpoint_base="https://dlcdn.apache.org/tomcat/tomcat"
    local tomcat_gh_repo="https://api.github.com/repos/apache/tomcat/tags?per_page=100"

    local retry=true
    local ignore_list=

    tomcat_versions_list=$(curl -s "${tomcat_gh_repo}")
    while $retry ; do
        tomcat_major_version_list=$(echo "${tomcat_versions_list}" | \
            jq -r '.[] | .name' | \
            sort -V | \
            grep "^${tomcat_major_version}" )

        echo "# tomcat_major_version_list: " >&2
        echo "${tomcat_major_version_list}" | awk '{print "##   "$0;}' >&2

        local tomcat_version=""
        if test -n "${ignore_list}" ; then
            echo "# Using ignore_list: '${ignore_list}'" >&2
            tomcat_version=$(echo "${tomcat_major_version_list}" | \
            grep -v ${ignore_list} | \
            tail -n 1 )
        else
            echo "# The ignore_list is empty." >&2
            tomcat_version=$(echo "${tomcat_major_version_list}" | \
            tail -n 1 )
        fi
        echo "# Candidate tomcat_version: ${tomcat_version}" >&2

        local release_endpoint_url="${release_endpoint_base}-${tomcat_major_version}/v${tomcat_version}"
        echo "# release_endpoint_url=${release_endpoint_url}" >&2

        status=$(curl -s -o /dev/null -w "%{response_code}" "${release_endpoint_url}")
        if test $status -eq 404 ; then
            echo "# Candidate tomcat_version: ${tomcat_version} not found on download site: ${release_endpoint_url} " >&2
            ignore_list+="${ignore_list}  -e ${tomcat_version} "
            retry=true
        else
            retry=false
            ignore_list=
        fi
    done
    echo "#   Using tomcat_version: ${tomcat_version} " >&2
    echo "${tomcat_version}"
}


################################################################################
#
# get_tomcat_distro()
#     $1 - the directory into which the Tomcat distribution files
#          will be placed
#     $2 - The version number of the Tomcat distribution to retrieve.
#          Example: 9.0.64
#
function get_tomcat_distro(){
    echo "${HR}" >&2
    echo "# TASK: get_tomcat_distro()" >&2

    # $1 - The directory into which the Tomcat distribution files
    #      will be placed
    local target_dir="${1}"
    echo "#             target_dir: ${target_dir}" >&2

    # $2 - The version number of the Tomcat distribution to retrieve.
    #       Example: 9.0.64
    local tomcat_version="${2}"
    echo "#         tomcat_version: ${tomcat_version}" >&2

    local tomcat_major_version=""
    tomcat_major_version=$(echo "${tomcat_version}" | awk 'BEGIN{FS="."}{print $1;}')
    echo "#   tomcat_major_version: ${tomcat_major_version}" >&2


    local silent="-s"

    local tomcat_distro="apache-tomcat-${tomcat_version}.tar.gz"
    echo "#          tomcat_distro: ${tomcat_distro}" >&2

    local tomcat_major_url="https://archive.apache.org/dist/tomcat/tomcat-${tomcat_major_version}"
    echo "#       tomcat_major_url: ${tomcat_major_url}" >&2

    local tomcat_distro_url="${tomcat_major_url}/v${tomcat_version}/bin/${tomcat_distro}"
    echo "#      tomcat_distro_url: ${tomcat_distro_url}" >&2
    local tomcat_distro_file="${target_dir}/${tomcat_distro}"
    echo "#     tomcat_distro_file: ${tomcat_distro_file}" >&2

    local tomcat_sig_url="${tomcat_distro_url}.asc"
    echo "#         tomcat_sig_url: ${tomcat_sig_url}" >&2
    local tomcat_sig_file="${tomcat_distro_file}.asc"
    echo "#        tomcat_sig_file: ${tomcat_sig_file}" >&2

    local tomcat_keys_url="${tomcat_major_url}/KEYS"
    echo "#        tomcat_keys_url: ${tomcat_keys_url}" >&2
    local tomcat_keys_file="${target_dir}/apache_tomcat_keys"
    echo "#       tomcat_keys_file: ${tomcat_keys_file}" >&2

    echo "#" >&2
    echo "#        cURL retrieving: ${tomcat_distro_url}" >&2
    curl ${silent} -o "${tomcat_distro_file}" "${tomcat_distro_url}"
    if test $? -ne 0; then
        echo "ERROR! Failed to retrieve Tomcat distribution from ${tomcat_distro_url}" >&2
        return 2
    fi

    echo "#" >&2
    echo "#        cURL retrieving: ${tomcat_sig_url}" >&2
    curl ${silent} -o "${tomcat_sig_file}" "${tomcat_sig_url}"
    if test $? -ne 0; then
        echo "ERROR! Failed to retrieve Tomcat distribution signature from ${tomcat_sig_url}" >&2
        return 2
    fi

    echo "#" >&2
    echo "#        cURL retrieving: ${tomcat_keys_url}" >&2
    curl ${silent} -o "${tomcat_keys_file}" "${tomcat_keys_url}"
    if test $? -ne 0; then
        echo "ERROR! Failed to retrieve Tomcat public keys from ${tomcat_keys_url}" >&2
        return 2
    fi

    echo "#" >&2
    echo "# Importing Tomcat public keys:" >&2
    echo "#        Local keys file: ${tomcat_keys_file}" >&2
    echo "#                 Source: ${tomcat_keys_url}" >&2
    gpg --import "${tomcat_keys_file}" >&2
    if test $? -ne 0 ; then
        echo "ERROR! Failed to import Tomcat public keys!" >&2
        return 2
    fi

    echo "#" >&2
    echo "# Verifying Tomcat distribution:" >&2
    echo "#     Tomcat public keys: ${tomcat_keys_file}" >&2
    echo "#      distribution file: ${tomcat_distro_file}" >&2
    echo "#              signature: ${tomcat_sig_file}" >&2

    gpg --verify "${tomcat_sig_file}" "${tomcat_distro_file}" >&2
    if test $? -ne 0 ; then
        echo "ERROR! Failed to verify Tomcat distribution!" >&2
        return 2
    fi
    echo "#" >&2
    return 0
}



################################################################################
#
# s3_pull() - Get a thing from an S3 bucket
#
function s3_pull(){
    local bucket_name="${1}"
    local object_name="${2}"
    local target_dir="${3}"
    echo "# S3 - Retrieving ${object_name} from ${bucket_name}" >&2
    python3 -m awscli s3 cp --quiet "s3://${bucket_name}/${object_name}" "${target_dir}/${object_name}" >&2
    echo "#" >&2
}

################################################################################
#
# s3_get_besd_distro() - Get the rpm and war files need for a Hyrax installation
#    from the identified S3 bucket.
#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The linux architecture (aka el7, el8, etc.)
#    $4 - The libap version number ##.##.##-##
#    $5 - The bes version number ##.##.##-##
#    $6 - A debug flag, if present (i.e. not empty string) then the devel and
#         debuginfo rpm files for libdap and bes will be retrieved as well.
#
function s3_get_besd_distro() {
    echo "${HR}" >&2
    echo "# TASK: s3_get_besd_distro()" >&2
    local s3_bucket="${1}"
    echo "#          s3_bucket: ${s3_bucket}" >&2
    local target_dir="${2}"
    echo "#         target_dir: ${target_dir}" >&2
    local larch="${3}"
    echo "# linux_architecture: ${larch}" >&2
    local libdap_version="${4}"
    echo "#     libdap_version: ${libdap_version}" >&2
    local bes_version="${5}"
    echo "#        bes_version: ${bes_version}" >&2
    local debug="${6}"
    echo "#              debug: ${debug}" >&2

    set -e

    echo "# Cleaning up..." >&2
    rm -fv "${target_dir}/*.rpm"

    echo "#" >&2
    s3_pull "${s3_bucket}" \
            "libdap-${libdap_version}.${larch}.x86_64.rpm" \
            "${target_dir}"

    if test -n "${debug}"; then # Only get the debug libs when invoked in debug mode
        s3_pull "${s3_bucket}" \
                "libdap-devel-${libdap_version}.${larch}.x86_64.rpm" \
                "${target_dir}"
        s3_pull "${s3_bucket}" \
                "libdap-debuginfo-${libdap_version}.${larch}.x86_64.rpm" \
                "${target_dir}"
    fi

    s3_pull "${s3_bucket}" \
            "bes-${bes_version}.static.${larch}.x86_64.rpm" \
            "${target_dir}"

    if test -n "${debug}"; then # Only get the debug libs when invoked in debug mode
        s3_pull "${s3_bucket}" \
                "bes-devel-${bes_version}.static.${larch}.x86_64.rpm" \
                "${target_dir}"
        s3_pull "${s3_bucket}" \
                "bes-debuginfo-${bes_version}.static.${larch}.x86_64.rpm" \
                "${target_dir}"
    fi

    set +e
    echo "#" >&2
    return 0
}



function curl_pull(){
    local release_url="${1}"
    local target_file="${2}"
    local target_dir="${3}"

    local target_url="${release_url}/${target_file}"
    echo "#" >&2
    echo "# curl_pull(), retrieving:" >&2
    echo "#   target_file: ${target_file}" >&2
    echo "#   release_url: ${release_url}" >&2
    echo "#    target_url: ${target_url}" >&2
    curl -s -o "${target_dir}/${target_file}" "${target_url}"
    echo "# "$(ls -l "${target_dir}/${target_file}") >&2
    echo "#" >&2
}

################################################################################
#
# woo_get_besd_distro() - Get the rpm and war files need for a Hyrax release
# from https://www.opendap.org/pub/binaries
#    $1 - The directory into which to place the Hyrax components.
#    $2 - The linux architecture (aka el7, el8, etc.)
#    $3 - The libap version number ##.##.##-##
#    $4 - The bes version number ##.##.##-##
#    $5 - A debug flag, if present (i.e. not empty string) then the devel and
#         debuginfo rpm files for libdap and bes will be retrieved as well.
#
function woo_get_besd_distro() {
    echo "${HR}" >&2
    echo "# TASK: woo_get_besd_distro()" >&2
    local target_dir="${1}"
    echo "#         target_dir: ${target_dir}" >&2
    local larch="${2}"
    echo "# linux_architecture: ${larch}" >&2
    local libdap_version="${3}"
    echo "#     libdap_version: ${libdap_version}" >&2
    local bes_version="${4}"
    echo "#        bes_version: ${bes_version}" >&2
    local hyrax_version="${5}"
    echo "#      hyrax_version: ${hyrax_version}" >&2
    local debug="${6}"
    echo "#              debug: ${debug}" >&2

    set -e

    echo "${HR}"
    echo "# woo_get_besd_distro()"
    echo "#"
    echo "# Cleaning up..." >&2
    rm -fv "${target_dir}/*.rpm"
    echo "#" >&2

    local release_dir="pub/binary"
    release_dir="${release_dir}/hyrax-"$(echo "${hyrax_version}" | awk '{split($0,a,"."); print a[1]"."a[2];}')
    if test "${larch}" = "el7"; then
        release_dir="${release_dir}/centos-7.x"
    elif test "${larch}" = "el8"; then
        release_dir="${release_dir}/rhel-8"
    fi
    echo "release_dir: ${release_dir}" >&2

    release_url="${RELEASE_HOST}/${release_dir}"
    echo "release_url: ${release_dir}" >&2


    target_file="libdap-${libdap_version}.${larch}.x86_64.rpm"
    curl_pull "${release_url}" "${target_file}" "${target_dir}"
    if test -n "${debug}"; then # Only get the debug libs when invoked in debug mode
        target_file="libdap-devel-${libdap_version}.${larch}.x86_64.rpm"
        curl_pull "${release_url}" "${target_file}" "${target_dir}"
        target_file="libdap-debuginfo-${libdap_version}.${larch}.x86_64.rpm"
        curl_pull "${release_url}" "${target_file}" "${target_dir}"
    fi


    target_file="bes-${bes_version}.static.${larch}.x86_64.rpm"
    curl_pull "${release_url}" "${target_file}" "${target_dir}"
    if test -n "${debug}"; then # Only get the debug libs when invoked in debug mode
        target_file="bes-devel-${bes_version}.static.${larch}.x86_64.rpm"
        curl_pull "${release_url}" "${target_file}" "${target_dir}"
        target_file="bes-debuginfo-${bes_version}.static.${larch}.x86_64.rpm"
        curl_pull "${release_url}" "${target_file}" "${target_dir}"
    fi

    set +e
    echo "#" >&2
    return 0
}


################################################################################
#
# s3_get_olfs_distro() - Get the rpm and war files need for a Hyrax installation
#    from the identified S3 bucket.
#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The olfs version number ##.##.##-##
#
function s3_get_olfs_distro() {
    echo "${HR}" >&2
    echo "# TASK: s3_get_olfs_distro()" >&2
    local s3_bucket="${1}"
    echo "#          s3_bucket: ${s3_bucket}" >&2
    local target_dir="${2}"
    echo "#         target_dir: ${target_dir}" >&2
    local olfs_version="${3}"
    echo "#       olfs_version: ${olfs_version}" >&2

    set -e
    echo "# Cleaning up..." >&2
    rm -fv "${target_dir}/olfs*.tgz"

    echo "#" >&2
    s3_pull "${s3_bucket}" \
            "olfs-${olfs_version}-webapp.tgz" \
            "${target_dir}"

    s3_pull "${s3_bucket}" \
            "robots-olfs-${olfs_version}-webapp.tgz" \
            "${target_dir}"
    set +e
    echo "#" >&2
    return 0
}


################################################################################
#
# woo_get_olfs_distro() - Get the rpm and war files need for a Hyrax installation
#    from the identified S3 bucket.
#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The olfs version number ##.##.##-##
#
function woo_get_olfs_distro() {
    echo "${HR}" >&2
    echo "# TASK: woo_get_olfs_distro()" >&2
    local target_dir="${2}"
    echo "#         target_dir: ${target_dir}" >&2
    local olfs_version="${3}"
    echo "#       olfs_version: ${olfs_version}" >&2

    release_url="${RELEASE_HOST}/pub/olfs"
    echo "release_url: ${release_dir}" >&2

    set -e
    echo "# Cleaning up..." >&2
    rm -fv "${target_dir}/olfs*.tgz" >&2
    rm -fv "${target_dir}/robots-olfs*.tgz" >&2

    target_file="olfs-${olfs_version}-webapp.tgz"
    curl_pull "${release_url}" "${target_file}" "${target_dir}"

    target_file="robots-olfs-${olfs_version}-webapp.tgz"
    curl_pull "${release_url}" "${target_file}" "${target_dir}"

    set +e
    echo "#" >&2
    return 0
}


################################################################################
#
# get_ngap_olfs_distro() - Get the rpm and war files need for a Hyrax NGAP OLFS
#    installation from the identified S3 bucket.
#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The olfs version number ##.##.##-##
#
function get_ngap_olfs_distro() {
    echo "${HR}" >&2
    echo "# TASK: get_ngap_olfs_distro()" >&2
    local s3_bucket="${1}"
    echo "#          s3_bucket: ${s3_bucket}" >&2
    local target_dir="${2}"
    echo "#         target_dir: ${target_dir}" >&2
    local olfs_version="${3}"
    echo "#       olfs_version: ${olfs_version}" >&2

    set -e
    echo "# Cleaning up..." >&2
    rm -fv "${target_dir}/ngap*.tgz"

    echo "#" >&2
    s3_pull "${s3_bucket}" \
            "ngap-${olfs_version}-webapp.tgz" \
            "${target_dir}"

    set +e
    echo "#" >&2
    return 0
}


function build_ngap() {
    echo "${HR}" >&2
    echo "# TASK: build_ngap_rh8()" >&2
#        --no-cache \
        docker build ${NO_CACHE} \
        --platform linux/amd64 \
        --build-arg TOMCAT_VERSION \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --build-arg OLFS_VERSION \
        --tag "${BUILD_VERSION_TAG}" \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        ${DOCKER_NAME}
    echo "#" >&2
    echo "#" >&2
}



function build_hyrax_docker() {
    local docker_name="${1}"
    echo "${HR}" >&2
    echo "# TASK: build_hyrax_docker()" >&2
#        --no-cache \
        docker build ${NO_CACHE} \
        --platform linux/amd64 \
        --build-arg TOMCAT_VERSION \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --build-arg OLFS_VERSION \
        --tag "${BUILD_VERSION_TAG}" \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        ${docker_name}
    echo "#" >&2
    echo "#" >&2
}

function build_hyrax_ncwms_docker() {
    local docker_name="${1}"
    echo "#" >&2
    export DOCKER_NAME="hyrax"
    source ./build-rh8
    export SNAPSHOT_IMAGE_TAG="opendap/${DOCKER_NAME}_ncwms:rh8-snapshot"
    export BUILD_VERSION_TAG="opendap/${DOCKER_NAME}_ncwms:rh8-${HYRAX_VERSION}"
    export TOMCAT_VERSION=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    show_version  >&2
    get_tomcat_distro "${DOCKER_NAME}" "${TOMCAT_VERSION}"
    s3_get_besd_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" true 2>&1
    s3_get_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1

    docker build \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --build-arg OLFS_VERSION \
        --build-arg USE_NCWMS=true \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        --tag "${BUILD_VERSION_TAG}" \
        "${DOCKER_NAME}"

    docker image ls -a
    #docker push ${SNAPSHOT_IMAGE_TAG}
    #docker push ${BUILD_VERSION_TAG}

    
    
    
    
}



function get_platform(){
    local platform=""
    if test `uname -m` = "arm64" ; then platform="--platform linux/amd64"; fi
    echo "${platform}"
}


function start_hyrax(){
    local image_tag="${1}"

    echo "${HR}" >&2
    echo "# TASK: start_hyrax()" >&2
    echo "#   Starting docker image: ${image_tag}" >&2
    local platform=""
    platform=$(get_platform)
    echo "#                platform: ${platform}" >&2

    docker run \
        -d\
        ${platform} \
        -h hyrax \
        -p 8080:8080 \
        --name=hyrax \
        --env SLEEP_INTERVAL \
        "${image_tag}"

    echo "#" >&2
}

function debug_hyrax(){
    local image_tag="${1}"

    echo "${HR}" >&2
    echo "# TASK: debug_hyrax()" >&2
    echo "#   Starting docker image: ${image_tag}" >&2
    local platform=""
    platform=$(get_platform)
    echo "#                platform: ${platform}" >&2

    # docker run -d -h hyrax -p 8080:8080 --name=hyrax "${IMAGE_TAG}"
    docker run \
        ${platform} \
        -h hyrax \
        -p 8080:8080 \
        --name=hyrax \
        --env SLEEP_INTERVAL \
        "${image_tag}"
}

function cleanup_build_files(){
    local docker_name="${1}"

    echo "${HR}" >&2
    echo "# TASK: cleanup_build_files()" >&2
    echo "#     Cleaning ${docker_name}" >&2
    local build_files=""
    build_files="${build_files} ${docker_name}/*.rpm"
    build_files="${build_files} ${docker_name}/olfs*.tgz"
    build_files="${build_files} ${docker_name}/ngap*.tgz"
    build_files="${build_files} ${docker_name}/robots*.tgz"
    build_files="${build_files} ${DOCKER_NAME}/apache*"
    # ls -Gl ${build_files} >&2
    rm -fv ${build_files} >&2
    echo "#" >&2
    echo "# DONE: cleanup_build_files()" >&2
    echo "#" >&2
}

function build_hyrax() {
    local log_file="build_hyrax.log"
    show_version 2>&1 | tee "${log_file}" >&2

    local tomcat_version="unset"
    tomcat_version=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    get_tomcat_distro \
        "${DOCKER_NAME}" \
        "${tomcat_version}" 2>&1 | tee -a "${log_file}" >&2

    s3_get_besd_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" 2>&1 | tee -a "${log_file}" >&2

    s3_get_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1 | tee -a "${log_file}" >&2

    get_ngap_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1 | tee -a "${log_file}" >&2

    build_hyrax_docker "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}" >&2
    cleanup_build_files "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}" >&2
}



function build_ngap() {
    local log_file="build_ngap.log"

    export DOCKER_NAME="ngap"
    show_version 2>&1 | tee "${log_file}" >&2


    local tomcat_version="unset"
    tomcat_version=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    get_tomcat_distro \
        "${DOCKER_NAME}" \
        "${tomcat_version}" 2>&1 | tee -a "${log_file}" >&2

    s3_get_besd_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" 2>&1 | tee -a "${log_file}" >&2

    get_ngap_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1 | tee -a "${log_file}" >&2

    build_hyrax_docker "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}" >&2
    cleanup_build_files "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}" >&2
}






function build_olfs_docker() {
    echo "${HR}" >&2
    echo "# TASK: build_olfs_docker()" >&2
#        --no-cache \
        docker build ${NO_CACHE} \
        --platform linux/amd64 \
        --build-arg TOMCAT_VERSION \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg OLFS_VERSION \
        --tag "${BUILD_VERSION_TAG}" \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        ${DOCKER_NAME}
    echo "#" >&2
    echo "#" >&2
}

function build_olfs() {
    local log_file="build_olfs.log"

    export DOCKER_NAME="olfs"
    show_version 2>&1 | tee "${log_file}" >&2

    local tomcat_version="unset"
    tomcat_version=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    get_tomcat_distro \
        "${DOCKER_NAME}" \
        "${tomcat_version}" 2>&1 | tee -a "${log_file}" >&2

    s3_get_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1 | tee -a "${log_file}" >&2

    build_olfs_docker 2>&1 | tee -a "${log_file}" >&2
#    cleanup_build_files "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}" >&2
}


function build_besd_docker() {
    echo "${HR}" >&2
    echo "# TASK: build_besd_docker()" >&2
#        --no-cache \
        docker build ${NO_CACHE} \
        --platform linux/amd64 \
        --build-arg RELEASE_DATE \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --tag "${BUILD_VERSION_TAG}" \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        ${DOCKER_NAME}
    echo "#" >&2
    echo "#" >&2
}

function build_besd() {
    local log_file="build_besd.log"

    export DOCKER_NAME="besd"
    show_version 2>&1 | tee "${log_file}" >&2

    s3_get_besd_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" 2>&1 | tee -a "${log_file}" >&2

    build_besd_docker 2>&1 | tee -a "${log_file}" >&2
#    cleanup_build_files "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}" >&2
}







