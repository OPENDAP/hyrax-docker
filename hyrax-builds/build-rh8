#!/bin/bash
HR="###########################################################################"
export DOCKER_NAME=${DOCKER_NAME:-"hyrax-rh8"}
export TOMCAT_MAJOR_VERSION=${TOMCAT_MAJOR_VERSION:-"9"}
export SLEEP_INTERVAL=${SLEEP_INTERVAL:-60}
export NO_CACHE=${NO_CACHE:-""}

export S3_BUILD_BUCKET="opendap.travis.build"
export RELEASE_DATE=""
export HYRAX_VERSION=""
export OLFS_VERSION=""
export BES_VERSION=""
export LIBDAP_VERSION=""
export HYRAX_VERSION_NUMBER=""

RELEASE_DATE=$(cat ../snapshot.time | grep hyrax | awk '{print $2;}')
HYRAX_VERSION=$(cat ../snapshot.time | grep hyrax | awk '{print $1;}')
HYRAX_VERSION_NUMBER=$(echo "${HYRAX_VERSION}" | sed "s/hyrax-//g" )
OLFS_VERSION=$(cat ../snapshot.time | grep olfs | sed "s/olfs-//g" | awk '{print $1;}')
BES_VERSION=$(cat ../snapshot.time | grep bes | sed "s/bes-//g" | awk '{print $1;}')
LIBDAP_VERSION=$(cat ../snapshot.time | grep libdap4 | sed "s/libdap4-//g"| awk '{print $1;}')

export SNAPSHOT_TAG="opendap/${DOCKER_NAME}:snapshot"
export IMAGE_TAG="opendap/${DOCKER_NAME}:${HYRAX_VERSION_NUMBER}"


function show_version(){
    echo "${HR}" >&2
    echo "#         RELEASE_DATE: ${RELEASE_DATE}" >&2
    echo "#        HYRAX_VERSION: ${HYRAX_VERSION}" >&2
    echo "#         OLFS_VERSION: ${OLFS_VERSION}" >&2
    echo "#          BES_VERSION: ${BES_VERSION}" >&2
    echo "#       LIBDAP_VERSION: ${LIBDAP_VERSION}" >&2
    echo "#          DOCKER_NAME: ${DOCKER_NAME}" >&2
    echo "#            IMAGE_TAG: ${IMAGE_TAG}" >&2
    echo "#         SNAPSHOT_TAG: ${SNAPSHOT_TAG}" >&2
    echo "#       SLEEP_INTERVAL: ${SLEEP_INTERVAL}" >&2
    echo "#" >&2
    echo "# TOMCAT_MAJOR_VERSION: ${TOMCAT_MAJOR_VERSION}" >&2
    echo "#" >&2
    echo "#             NO_CACHE: ${NO_CACHE}" >&2
    echo "#" >&2
}

function get_latest_tomcat_version_number(){
    local tomcat_major_version="${1}"

    local tomcat_gh_repo="https://api.github.com/repos/apache/tomcat/tags"
    local per_page_count=100
    local tomcat_version=""
    tomcat_version=$(curl -s "${tomcat_gh_repo}?per_page=${per_page_count}" | \
        jq -r '.[] | .name' | \
        sort -V | \
        grep "^${tomcat_major_version}" | \
        tail -n 1 )

    echo "#   Using tomcat_version: ${tomcat_version}" >&2
    echo "${tomcat_version}"
}


################################################################################
#
# get_tomcat_distro()
#     $1 - the directory into which the Tomcat distribution files
#          will be placed
#     $2 - The version number of the Tomcat distribution to retrieve.
#          Example: 9.0.64
#
function get_tomcat_distro(){
    echo "${HR}" >&2
    echo "# TASK: get_tomcat_distro()" >&2

    # $1 - The directory into which the Tomcat distribution files
    #      will be placed
    local target_dir="${1}"
    echo "#             target_dir: ${target_dir}" >&2

    # $2 - The version number of the Tomcat distribution to retrieve.
    #       Example: 9.0.64
    local tomcat_version="${2}"
    echo "#         tomcat_version: ${tomcat_version}" >&2

    local tomcat_major_version=""
    tomcat_major_version=$(echo "${tomcat_version}" | awk 'BEGIN{FS="."}{print $1;}')
    echo "#   tomcat_major_version: ${tomcat_major_version}" >&2


    local silent="-s"

    local tomcat_distro="apache-tomcat-${tomcat_version}.tar.gz"
    echo "#          tomcat_distro: ${tomcat_distro}" >&2

    local tomcat_major_url="https://archive.apache.org/dist/tomcat/tomcat-${tomcat_major_version}"
    echo "#       tomcat_major_url: ${tomcat_major_url}" >&2

    local tomcat_distro_url="${tomcat_major_url}/v${tomcat_version}/bin/${tomcat_distro}"
    echo "#      tomcat_distro_url: ${tomcat_distro_url}" >&2
    local tomcat_distro_file="${target_dir}/${tomcat_distro}"
    echo "#     tomcat_distro_file: ${tomcat_distro_file}" >&2

    local tomcat_sig_url="${tomcat_distro_url}.asc"
    echo "#         tomcat_sig_url: ${tomcat_sig_url}" >&2
    local tomcat_sig_file="${tomcat_distro_file}.asc"
    echo "#        tomcat_sig_file: ${tomcat_sig_file}" >&2

    local tomcat_keys_url="${tomcat_major_url}/KEYS"
    echo "#        tomcat_keys_url: ${tomcat_keys_url}" >&2
    local tomcat_keys_file="${target_dir}/apache_tomcat_keys"
    echo "#       tomcat_keys_file: ${tomcat_keys_file}" >&2

    echo "#" >&2
    echo "#        cURL retrieving: ${tomcat_distro_url}" >&2
    curl ${silent} -o "${tomcat_distro_file}" "${tomcat_distro_url}"
    if test $? -ne 0; then
        echo "ERROR! Failed to retrieve Tomcat distribution from ${tomcat_distro_url}" >&2
        return 2
    fi

    echo "#" >&2
    echo "#        cURL retrieving: ${tomcat_sig_url}" >&2
    curl ${silent} -o "${tomcat_sig_file}" "${tomcat_sig_url}"
    if test $? -ne 0; then
        echo "ERROR! Failed to retrieve Tomcat distribution signature from ${tomcat_sig_url}" >&2
        return 2
    fi

    echo "#" >&2
    echo "#        cURL retrieving: ${tomcat_keys_url}" >&2
    curl ${silent} -o "${tomcat_keys_file}" "${tomcat_keys_url}"
    if test $? -ne 0; then
        echo "ERROR! Failed to retrieve Tomcat public keys from ${tomcat_keys_url}" >&2
        return 2
    fi

    echo "#" >&2
    echo "# Importing Tomcat public keys:" >&2
    echo "#        Local keys file: ${tomcat_keys_file}" >&2
    echo "#                 Source: ${tomcat_keys_url}" >&2
    gpg --import "${tomcat_keys_file}" >&2
    if test $? -ne 0 ; then
        echo "ERROR! Failed to import Tomcat public keys!" >&2
        return 2
    fi

    echo "#" >&2
    echo "# Verifying Tomcat distribution:" >&2
    echo "#     Tomcat public keys: ${tomcat_keys_file}" >&2
    echo "#      distribution file: ${tomcat_distro_file}" >&2
    echo "#              signature: ${tomcat_sig_file}" >&2

    gpg --verify "${tomcat_sig_file}" "${tomcat_distro_file}" >&2
    if test $? -ne 0 ; then
        echo "ERROR! Failed to verify Tomcat distribution!" >&2
        return 2
    fi
    echo "#" >&2
    return 0
}



################################################################################
#
# s3_pull() - Get a thing from an S3 bucket
#
function s3_pull(){
    local bucket_name="${1}"
    local object_name="${2}"
    local target_dir="${3}"
    echo "# S3 - Retrieving ${object_name} from ${bucket_name}" >&2
    aws s3 cp "s3://${bucket_name}/${object_name}" "${target_dir}/${object_name}" >&2
    echo "#" >&2
}

################################################################################
#
# get_hyrax_distro() - Get the rpm and war files need for a Hyrax installation
#    from the identified S3 bucket.
#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The linux architecture (aka el7, el8, etc.)
#    $4 - The libap version number ##.##.##-##
#    $5 - The bes version number ##.##.##-##
#    $6 - The olfs version number ##.##.##-##
#    $7 - A debug flag, if present (i.e. not empty string) then the devel and
#         debuginfo rpm files for libdap and bes will be retrieved as well.
#
function get_hyrax_distro() {
    echo "${HR}" >&2
    echo "# TASK: get_hyrax_distro()" >&2
    local s3_bucket="${1}"
    echo "#          s3_bucket: ${s3_bucket}" >&2
    local target_dir="${2}"
    echo "#         target_dir: ${target_dir}" >&2
    local larch="${3}"
    echo "# linux_architecture: ${larch}" >&2
    local libdap_version="${4}"
    echo "#     libdap_version: ${libdap_version}" >&2
    local bes_version="${5}"
    echo "#        bes_version: ${bes_version}" >&2
    local olfs_version="${6}"
    echo "#       olfs_version: ${olfs_version}" >&2
    local debug="${7}"
    echo "#              debug: ${debug}" >&2

    set -e

    rm -fv "${target_dir}/*.rpm"
    rm -fv "${target_dir}/olfs*.tgz"
    rm -fv "${target_dir}/robots*.tgz"

    s3_pull "${s3_bucket}" \
            "libdap-${libdap_version}.${larch}.x86_64.rpm" \
            "${target_dir}"
    if test -n "${debug}"; then
        s3_pull "${s3_bucket}" \
                "libdap-devel-${libdap_version}.${larch}.x86_64.rpm" \
                "${target_dir}"
        s3_pull "${s3_bucket}" \
                "libdap-debuginfo-${libdap_version}.${larch}.x86_64.rpm" \
                "${target_dir}"
    fi

    s3_pull "${s3_bucket}" \
            "bes-${bes_version}.static.${larch}.x86_64.rpm" \
            "${target_dir}"

    if test -n "${debug}"; then
        s3_pull "${s3_bucket}" \
                "bes-devel-${bes_version}.static.${larch}.x86_64.rpm" \
                "${target_dir}"
        s3_pull "${s3_bucket}" \
                "bes-debuginfo-${bes_version}.static.${larch}.x86_64.rpm" \
                "${target_dir}"
    fi
    s3_pull "${s3_bucket}" \
            "olfs-${olfs_version}-webapp.tgz" \
            "${target_dir}"
    s3_pull "${s3_bucket}" \
            "robots-olfs-${olfs_version}-webapp.tgz" \
            "${target_dir}"
    set +e
    echo "#" >&2
}

function build_hyrax() {
    echo "${HR}" >&2
    echo "# TASK: build_hyrax_rh8()" >&2
#        --no-cache \
        docker build ${NO_CACHE}\
        --platform linux/amd64 \
        --build-arg TOMCAT_VERSION \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --build-arg OLFS_VERSION \
        --tag "${IMAGE_TAG}" \
        --tag "${SNAPSHOT_TAG}" \
        ${DOCKER_NAME}
    echo "#" >&2
    echo "#" >&2
}
function get_platform(){
    local platform=""
    if test `uname -m` = "arm64" ; then platform="--platform linux/amd64"; fi
    echo "${platform}"
}


function start_hyrax(){
    local image_tag="${1}"

    echo "${HR}" >&2
    echo "# TASK: start_hyrax()" >&2
    echo "#   Starting docker image: ${image_tag}" >&2
    local platform=""
    platform=$(get_platform)
    echo "#                platform: ${platform}" >&2

    # docker run -d -h hyrax -p 8080:8080 --name=hyrax "${IMAGE_TAG}"
    docker run \
        -d\
        ${platform} \
        -h hyrax \
        -p 8080:8080 \
        --name=hyrax \
        --env SLEEP_INTERVAL \
        "${IMAGE_TAG}"

    echo "#" >&2
}

function debug_hyrax(){
    local image_tag="${1}"

    echo "${HR}" >&2
    echo "# TASK: debug_hyrax()" >&2
    echo "#   Starting docker image: ${image_tag}" >&2
    local platform=""
    platform=$(get_platform)
    echo "#                platform: ${platform}" >&2

    # docker run -d -h hyrax -p 8080:8080 --name=hyrax "${IMAGE_TAG}"
    docker run \
        ${platform} \
        -h hyrax \
        -p 8080:8080 \
        --name=hyrax \
        --env SLEEP_INTERVAL \
        "${image_tag}"
}

function cleanup_build_files(){
    echo "${HR}" >&2
    echo "# TASK: cleanup_build_files()" >&2
    echo "#     Cleaning ${DOCKER_NAME}" >&2
    local build_files=""
    build_files="${build_files} ${DOCKER_NAME}/*.rpm"
    build_files="${build_files} ${DOCKER_NAME}/olfs*.tgz"
    build_files="${build_files} ${DOCKER_NAME}/robots*.tgz"
    build_files="${build_files} ${DOCKER_NAME}/apache*"
    # ls -Gl ${build_files} >&2
    rm -fv ${build_files} >&2
    echo "#" >&2
    echo "# DONE: cleanup_build_files()" >&2
    echo "#" >&2
}

function build_rh8() {
    local log_file="brh8.log"
    show_version 2>&1 | tee "${log_file}" >&2

    local tomcat_version="unset"
    tomcat_version=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    echo "# Using Tomcat version: ${tomcat_version}" | tee -a "${log_file}" >&2
    get_tomcat_distro "${DOCKER_NAME}" "${tomcat_version}" 2>&1 | tee -a "${log_file}" >&2


#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The linux architecture (aka el7, el8, etc.)
#    $4 - The libap version number ##.##.##-##
#    $5 - The bes version number ##.##.##-##
#    $6 - The olfs version number ##.##.##-##
#    $7 - A debug flag, if present (i.e. not empty string) then the devel and
#         debuginfo rpm files for libdap and bes will be retrieved as well.
    get_hyrax_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" \
        "${OLFS_VERSION}" \
        true 2>&1 | tee -a "${log_file}" >&2

    build_hyrax 2>&1 | tee -a "${log_file}" >&2
    cleanup_build_files 2>&1 | tee -a "${log_file}" >&2
}







