#!/bin/bash
 HR="##########################################################################"
HR2="== == == == == == == == == == == == == == == == == == == == == == == == =="
HR3="- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -"
export BUILD_RECIPE_FILE=${1:-"../snapshot.time"}
export S3_BUILD_BUCKET=${S3_BUILD_BUCKET:-"opendap.travis.build"}
export DOCKER_NAME=${DOCKER_NAME:-"hyrax"}
export TOMCAT_MAJOR_VERSION=${TOMCAT_MAJOR_VERSION:-"9"}
export SLEEP_INTERVAL=${SLEEP_INTERVAL:-60}
export NO_CACHE=${NO_CACHE:-""}


###########################################################################
function loggy(){
    if test -n "${log_file}"
    then
        echo  "$@"  | awk '{ print "# "$0;}' | tee -a "${log_file}" >&2
    else
        echo  "$@" | awk '{ print "# "$0;}'  >&2
    fi
}
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

function read_build_recipe() {
    local build_recipe_file="${1}"
    local build_recipe=""
    build_recipe=$(cat "${build_recipe_file}")

    export RELEASE_DATE=""
    export HYRAX_VERSION=""
    export OLFS_VERSION=""
    export BES_VERSION=""
    export BUILD_DMRPP_VERSION=""
    export LIBDAP_VERSION=""
    RELEASE_DATE=${RELEASE_DATE:-$(echo "${build_recipe}" | grep hyrax | awk '{print $2;}')}
    HYRAX_VERSION=${HYRAX_VERSION:-$(echo "${build_recipe}" | grep hyrax | awk '{print $1;}' | sed "s/hyrax-//g" )}
    OLFS_VERSION=${OLFS_VERSION:-$(echo "${build_recipe}" | grep olfs | sed "s/olfs-//g" | awk '{print $1;}')}
    BES_VERSION=${BES_VERSION:-$(echo "${build_recipe}" | grep bes | sed "s/bes-//g" | awk '{print $1;}')}
    BUILD_DMRPP_VERSION=${BUILD_DMRPP_VERSION:-$(echo "${build_recipe}" | grep "build_dmrpp-" | sed "s/build_dmrpp-//g" | awk '{print $1;}')}
    LIBDAP_VERSION=${LIBDAP_VERSION:-$(echo "${build_recipe}" | grep libdap4 | sed "s/libdap4-//g"| awk '{print $1;}')}
}
read_build_recipe "${BUILD_RECIPE_FILE}"


export SNAPSHOT_IMAGE_TAG=${SNAPSHOT_IMAGE_TAG:-"opendap/${DOCKER_NAME}:snapshot"}
export BUILD_VERSION_TAG=${BUILD_VERSION_TAG:-"opendap/${DOCKER_NAME}:${HYRAX_VERSION}"}

export RELEASE_HOST=${RELEASE_HOST:-"https://www.opendap.org"}


function show_version(){
    loggy "${HR}"
    loggy "        RELEASE_DATE: ${RELEASE_DATE}"
    loggy "       HYRAX_VERSION: ${HYRAX_VERSION}"
    loggy "        OLFS_VERSION: ${OLFS_VERSION}"
    loggy "         BES_VERSION: ${BES_VERSION}"
    loggy " BUILD_DMRPP_VERSION: ${BUILD_DMRPP_VERSION}"
    loggy "      LIBDAP_VERSION: ${LIBDAP_VERSION}"
    loggy "         DOCKER_NAME: ${DOCKER_NAME}"
    loggy "   BUILD_VERSION_TAG: ${BUILD_VERSION_TAG}"
    loggy "  SNAPSHOT_IMAGE_TAG: ${SNAPSHOT_IMAGE_TAG}"
    loggy "     S3_BUILD_BUCKET: ${S3_BUILD_BUCKET}"
    loggy "      SLEEP_INTERVAL: ${SLEEP_INTERVAL}"
    loggy ""
    loggy "TOMCAT_MAJOR_VERSION: ${TOMCAT_MAJOR_VERSION}"
    loggy "      TOMCAT_VERSION: ${TOMCAT_VERSION}"
    loggy ""
    loggy "            NO_CACHE: ${NO_CACHE}"
    loggy ""
    loggy ""
}



################################################################################
#
# get_tomcat_tag_names()
#
# Goes to the Tomcat GitHub and retrieves the number of tag names, t_count using
# the api.github endpoint. The function checks for the value of t_count in $1
# and if it's not found defaults to 120. If t_count is greater than 100
# then this code will make multiple requests to api.github in order to gather
# the values from multiple pages.
#
function get_tomcat_tag_names(){
    local t_count="${1}"
    if test -z "$t_count"; then t_count=120; fi
    loggy "Retrieving $t_count tags."

    local tomcat_gh_repo="https://api.github.com/repos/apache/tomcat/tags"
    loggy "Tomcat tomcat_gh_repo: $tomcat_gh_repo"

    local remaining=$t_count
    local tag_count=0
    local tag_names=""
    local ntc
    local page=0
    while test $remaining -gt 0
    do
        if test $remaining -gt 100
        then
            ntc=100;
        else
            ntc=$remaining;
        fi
        let "page++"
        let "remaining-=ntc"

        new_tags=$(curl -s "${tomcat_gh_repo}?per_page=${ntc}&page=${page}" | \
                    jq -r '.[] | .name')
        #loggy "new_tags: "
        #loggy "$new_tags"
        if test -n "$tag_names"
        then
            tag_names=$(echo "$tag_names"; echo "" ; echo "$new_tags" )
        else
            tag_names="$new_tags"
        fi
        #loggy "tag_names: "
        #loggy "$tag_names"
    done

    tag_count=$( echo "$tag_names" | wc -l )
    loggy "Retrieved $tag_count tags from $tomcat_gh_repo"
    echo "$tag_names" | sort -V
}

################################################################################
#
# get_latest_tomcat_version_number()
#
# Using the passed tomcat_major_version this function uses the Tomcat GitHub
# repo to find the most recent release for that major version, and then checks
# to make sure that the release is available from the Tomcat download server.
# If the version is not available on the download server, the release is
# discarded and the next most recent release is chosen.
#
# https://github.com/apache/tomcat
#
function get_latest_tomcat_version_number(){
    local tomcat_major_version="${1}"

    local release_endpoint_base="https://dlcdn.apache.org/tomcat/tomcat"
    loggy "Tomcat release_endpoint_base: $release_endpoint_base"

    local tomcat_gh_repo="https://api.github.com/repos/apache/tomcat/tags?per_page=100"
    loggy "Tomcat tomcat_gh_repo: $tomcat_gh_repo"

    local retry=true
    local ignore_list=
    local tomcat_tags=

    tomcat_tags=$(get_tomcat_tag_names 200)
    #loggy "Tomcat tomcat_tags: $tomcat_tags"
    while $retry ; do
        tomcat_major_version_list=$(echo "${tomcat_tags}" | grep "^${tomcat_major_version}" )

        loggy "tomcat_major_version_list: "
        loggy "${tomcat_major_version_list}"

        local tomcat_version=""
        if test -n "${ignore_list}" ; then
            loggy "Using ignore_list: '${ignore_list}'"
            tomcat_version=$(echo "${tomcat_major_version_list}" | \
            grep -v ${ignore_list} | \
            tail -n 1 )
        else
            loggy "The ignore_list is empty."
            tomcat_version=$(echo "${tomcat_major_version_list}" | \
            tail -n 1 )
        fi
        loggy "Candidate tomcat_version: ${tomcat_version}"

        local release_endpoint_url="${release_endpoint_base}-${tomcat_major_version}/v${tomcat_version}"
        loggy "release_endpoint_url=${release_endpoint_url}"

        status=$(curl -s -o /dev/null -w "%{response_code}" "${release_endpoint_url}")
        if test $status -eq 404 ; then
            loggy "Candidate tomcat_version: ${tomcat_version} not found on download site: ${release_endpoint_url} "
            if test -n "${tomcat_version}"; then
                ignore_list+="${ignore_list}  -e ${tomcat_version} "
            else
                loggy "ERROR: The tomcat_version is inexplicably empty. Exiting."
                loggy "FAILED_TO_LOCATE_TOMCAT_VERSION"
                return 1;
            fi
            retry=true
        else
            retry=false
            ignore_list=
        fi
    done
    loggy "  Using tomcat_version: ${tomcat_version} "
    echo "${tomcat_version}"
}


################################################################################
#
# get_tomcat_distro()
#     $1 - the directory into which the Tomcat distribution files
#          will be placed
#     $2 - The version number of the Tomcat distribution to retrieve.
#          Example: 9.0.64
#
function get_tomcat_distro(){
    loggy "${HR}"
    loggy "TASK: get_tomcat_distro()"

    # $1 - The directory into which the Tomcat distribution files
    #      will be placed
    local target_dir="${1}"
    loggy "            target_dir: ${target_dir}"

    # $2 - The version number of the Tomcat distribution to retrieve.
    #       Example: 9.0.64
    local tomcat_version="${2}"
    loggy "        tomcat_version: ${tomcat_version}"

    local tomcat_major_version=""
    tomcat_major_version=$(echo "${tomcat_version}" | awk 'BEGIN{FS="."}{print $1;}')
    loggy "  tomcat_major_version: ${tomcat_major_version}"


    local silent="-s"

    local tomcat_distro="apache-tomcat-${tomcat_version}.tar.gz"
    loggy "         tomcat_distro: ${tomcat_distro}"

    local tomcat_major_url="https://archive.apache.org/dist/tomcat/tomcat-${tomcat_major_version}"
    loggy "      tomcat_major_url: ${tomcat_major_url}"

    local tomcat_distro_url="${tomcat_major_url}/v${tomcat_version}/bin/${tomcat_distro}"
    loggy "     tomcat_distro_url: ${tomcat_distro_url}"
    local tomcat_distro_file="${target_dir}/${tomcat_distro}"
    loggy "    tomcat_distro_file: ${tomcat_distro_file}"

    local tomcat_sig_url="${tomcat_distro_url}.asc"
    loggy "        tomcat_sig_url: ${tomcat_sig_url}"
    local tomcat_sig_file="${tomcat_distro_file}.asc"
    loggy "       tomcat_sig_file: ${tomcat_sig_file}"

    local tomcat_keys_url="${tomcat_major_url}/KEYS"
    loggy "       tomcat_keys_url: ${tomcat_keys_url}"
    local tomcat_keys_file="${target_dir}/apache_tomcat_keys"
    loggy "      tomcat_keys_file: ${tomcat_keys_file}"

    loggy ""
    loggy "       cURL retrieving: ${tomcat_distro_url}"
    curl ${silent} -o "${tomcat_distro_file}" "${tomcat_distro_url}"
    if test $? -ne 0; then
        echo "ERROR! Failed to retrieve Tomcat distribution from ${tomcat_distro_url}" >&2
        return 2
    fi

    loggy ""
    loggy "       cURL retrieving: ${tomcat_sig_url}"
    curl ${silent} -o "${tomcat_sig_file}" "${tomcat_sig_url}"
    if test $? -ne 0; then
        echo "ERROR! Failed to retrieve Tomcat distribution signature from ${tomcat_sig_url}" >&2
        return 2
    fi

    loggy ""
    loggy "       cURL retrieving: ${tomcat_keys_url}"
    curl ${silent} -o "${tomcat_keys_file}" "${tomcat_keys_url}"
    if test $? -ne 0; then
        echo "ERROR! Failed to retrieve Tomcat public keys from ${tomcat_keys_url}" >&2
        return 2
    fi

    loggy ""
    loggy "Importing Tomcat public keys:"
    loggy "       Local keys file: ${tomcat_keys_file}"
    loggy "                Source: ${tomcat_keys_url}"
    gpg --import "${tomcat_keys_file}" 2>&1 | awk '{print "#    ", $0;}'
    if test $? -ne 0 ; then
        echo "ERROR! Failed to import Tomcat public keys!" >&2
        return 2
    fi

    loggy ""
    loggy "Verifying Tomcat distribution:"
    loggy "    Tomcat public keys: ${tomcat_keys_file}"
    loggy "     distribution file: ${tomcat_distro_file}"
    loggy "             signature: ${tomcat_sig_file}"
    loggy ""

    gpg --verify "${tomcat_sig_file}" "${tomcat_distro_file}" 2>&1 | awk '{print "#    ", $0;}'
    if test $? -ne 0 ; then
        echo "ERROR! Failed to verify Tomcat distribution!" >&2
        return 2
    fi
    loggy ""
    return 0
}

################################################################################
#
# check_aws() - Get a thing from an S3 bucket
#
# [-bash: ~] aws configure list
#       Name                    Value             Type    Location
#       ----                    -----             ----    --------
#    profile                <not set>             None    None
# access_key                <not set>             None    None
# secret_key                <not set>             None    None
#     region                us-west-2      config-file    ~/.aws/config
#
# export AWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE
# export AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
# export AWS_DEFAULT_REGION=us-west-2
#
#
function check_aws(){
    loggy "${HR}"
    loggy ""
    loggy "check_aws()"
    loggy ""

    local aws_config_list=
    aws_config_list=$(aws configure list | sed -e "s/not set/not_set/g")
    local access_key
    access_key=$(echo "${aws_config_list}" | grep -i access_key | awk '{print $2;}')
    local secret_key
    secret_key=$(echo "${aws_config_list}" | grep -i secret_key | awk '{print $2;}')
    local region
    region=$(echo "${aws_config_list}" | grep -i region | awk '{print $2;}')
    local partial=
    partial=$(echo "${aws_config_list}" | grep -i "Partial credentials found in env")

    ns="<not_set>"
    status=0;
    if test "${access_key}" = "${ns}"; then
      status=1
      loggy "The AWS_ACCESS_KEY_ID has not been set."
    fi
    if test "${secret_key}" = "${ns}"; then
      status=1
      loggy "The AWS_SECRET_ACCESS_KEY has not been set."
    fi
    if test "${region}" = "${ns}"; then
      status=1
      loggy "The AWS_DEFAULT_REGION has not been set."
    fi

    if test -n "${partial}"; then
        status=1
        loggy "${partial}"
    fi
    return $status
}

################################################################################
#
# s3_pull() - Get a thing from an S3 bucket
#
function s3_pull(){
    local bucket_name="${1}"
    local object_name="${2}"
    local target_dir="${3}"
    loggy "S3 - Retrieving ${object_name} from ${bucket_name}"
    python3 -m awscli s3 cp --quiet "s3://${bucket_name}/${object_name}" "${target_dir}/${object_name}"
    loggy ""
}

################################################################################
#
# s3_get_besd_distro() - Get the rpm and war files need for a Hyrax installation
#    from the identified S3 bucket.
#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The linux architecture (aka el7, el8, etc.)
#    $4 - The libap version number ##.##.##-##
#    $5 - The bes version number ##.##.##-##
#    $6 - A debug flag, if present (i.e. not empty string) then the devel and
#         debuginfo rpm files for libdap and bes will be retrieved as well.
#
function s3_get_besd_distro() {
    loggy "${HR2}"
    loggy "TASK: s3_get_besd_distro()"
    local s3_bucket="${1}"
    loggy "         s3_bucket: ${s3_bucket}"
    local target_dir="${2}"
    loggy "        target_dir: ${target_dir}"
    local larch="${3}"
    loggy "linux_architecture: ${larch}"
    local libdap_version="${4}"
    loggy "    libdap_version: ${libdap_version}"
    local bes_version="${5}"
    loggy "       bes_version: ${bes_version}"
    local debug="${6}"
    loggy "             debug: ${debug}"

    set -e

    loggy "Cleaning up..."
    rm -fv "${target_dir}/*.rpm"

    loggy ""
    s3_pull "${s3_bucket}" \
            "libdap-${libdap_version}.${larch}.x86_64.rpm" \
            "${target_dir}"

    if test -n "${debug}"; then # Only get the debug libs when invoked in debug mode
        s3_pull "${s3_bucket}" \
                "libdap-devel-${libdap_version}.${larch}.x86_64.rpm" \
                "${target_dir}"
        s3_pull "${s3_bucket}" \
                "libdap-debuginfo-${libdap_version}.${larch}.x86_64.rpm" \
                "${target_dir}"
    fi

    s3_pull "${s3_bucket}" \
            "bes-${bes_version}.static.${larch}.x86_64.rpm" \
            "${target_dir}"

    if test -n "${debug}"; then # Only get the debug libs when invoked in debug mode
        s3_pull "${s3_bucket}" \
                "bes-devel-${bes_version}.static.${larch}.x86_64.rpm" \
                "${target_dir}"
        s3_pull "${s3_bucket}" \
                "bes-debuginfo-${bes_version}.static.${larch}.x86_64.rpm" \
                "${target_dir}"
    fi

    set +e
    loggy ""
    return 0
}



function curl_pull(){
    local release_url="${1}"
    local target_file="${2}"
    local target_dir="${3}"

    local target_url="${release_url}/${target_file}"
    loggy "$HR3"
    loggy "curl_pull(), retrieving:"
    loggy "  target_file: ${target_file}"
    loggy "  release_url: ${release_url}"
    loggy "   target_url: ${target_url}"
    curl -s -L -o "${target_dir}/${target_file}" "${target_url}"
    loggy ""$(ls -l "${target_dir}/${target_file}")
    loggy ""
}

################################################################################
#
# woo_get_besd_distro() - Get the rpm and war files need for a Hyrax release
# from https://www.opendap.org/pub/binaries
#    $1 - The directory into which to place the Hyrax components.
#    $2 - The linux architecture (aka el7, el8, etc.)
#    $3 - The libap version number ##.##.##-##
#    $4 - The bes version number ##.##.##-##
#    $5 - A debug flag, if present (i.e. not empty string) then the devel and
#         debuginfo rpm files for libdap and bes will be retrieved as well.
#
function woo_get_besd_distro() {
    loggy "${HR}"
    loggy "TASK: woo_get_besd_distro()"
    local target_dir="${1}"
    loggy "        target_dir: ${target_dir}"
    local larch="${2}"
    loggy "linux_architecture: ${larch}"
    local libdap_version="${3}"
    loggy "    libdap_version: ${libdap_version}"
    local bes_version="${4}"
    loggy "       bes_version: ${bes_version}"
    local hyrax_version="${5}"
    loggy "     hyrax_version: ${hyrax_version}"
    local debug="${6}"
    loggy "             debug: ${debug}"

    set -e
    loggy ""
    loggy "Cleaning up..."
    rm -fv "${target_dir}/*.rpm"
    loggy ""

    local release_dir="pub/binary"
    release_dir="${release_dir}/hyrax-"$(echo "${hyrax_version}" | awk '{split($0,a,"."); print a[1]"."a[2];}')
    ######### FIXME #########
    # FIXME - rocky-8 or rhel8? wtf
    release_dir="${release_dir}/rocky-8"
    ######## FIXME #########
    loggy "release_dir: ${release_dir}"

    release_url="${RELEASE_HOST}/${release_dir}"
    loggy "release_url: ${release_url}"

    target_file="libdap-${libdap_version}.${larch}.x86_64.rpm"
    curl_pull "${release_url}" "${target_file}" "${target_dir}"
    if test -n "${debug}"; then # Only get the debug libs when invoked in debug mode
        target_file="libdap-devel-${libdap_version}.${larch}.x86_64.rpm"
        curl_pull "${release_url}" "${target_file}" "${target_dir}"
        target_file="libdap-debuginfo-${libdap_version}.${larch}.x86_64.rpm"
        curl_pull "${release_url}" "${target_file}" "${target_dir}"
    fi


    target_file="bes-${bes_version}.static.${larch}.x86_64.rpm"
    curl_pull "${release_url}" "${target_file}" "${target_dir}"
    if test -n "${debug}"; then # Only get the debug libs when invoked in debug mode
        target_file="bes-devel-${bes_version}.static.${larch}.x86_64.rpm"
        curl_pull "${release_url}" "${target_file}" "${target_dir}"
        target_file="bes-debuginfo-${bes_version}.static.${larch}.x86_64.rpm"
        curl_pull "${release_url}" "${target_file}" "${target_dir}"
    fi

    set +e
    loggy ""
    return 0
}


################################################################################
#
# s3_get_olfs_distro() - Get the rpm and war files need for a Hyrax installation
#    from the identified S3 bucket.
#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The olfs version number ##.##.##-##
#
function s3_get_olfs_distro() {
    loggy "${HR}"
    loggy "TASK: s3_get_olfs_distro()"
    local s3_bucket="${1}"
    loggy "         s3_bucket: ${s3_bucket}"
    local target_dir="${2}"
    loggy "        target_dir: ${target_dir}"
    local olfs_version="${3}"
    loggy "      olfs_version: ${olfs_version}"

    set -e
    loggy "Cleaning up..."
    rm -fv "${target_dir}/olfs*.tgz"

    loggy ""
    s3_pull "${s3_bucket}" \
            "olfs-${olfs_version}-webapp.tgz" \
            "${target_dir}"

    s3_pull "${s3_bucket}" \
            "robots-olfs-${olfs_version}-webapp.tgz" \
            "${target_dir}"
    set +e
    loggy ""
    return 0
}

################################################################################
#
# s3_get_build_dmrpp_distro() - Get the rpm and war files need for a Hyrax
# installation from the identified S3 bucket.
#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The olfs version number ##.##.##-##
#
function s3_get_build_dmrpp_distro() {
    loggy "${HR}"
    loggy "TASK: s3_get_build_dmrpp_distro()"
    local s3_bucket="${1}"
    loggy "          s3_bucket: ${s3_bucket}"
    local target_dir="${2}"
    loggy "         target_dir: ${target_dir}"
    local build_dmrpp_version="${3}"
    loggy "build_dmrpp_version: ${build_dmrpp_version}"

    set -e
    loggy "Cleaning up..."
    rm -fv "${target_dir}/build_dmrpp*.tgz"

    loggy ""
    s3_pull "${s3_bucket}" \
            "build_dmrpp-${build_dmrpp_version}-webapp.tgz" \
            "${target_dir}"

    set +e
    loggy ""
    return 0
}


################################################################################
#
# woo_get_olfs_distro() - Get the rpm and war files need for a Hyrax installation
#    from the identified S3 bucket.
#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The olfs version number ##.##.##-##
#
function woo_get_olfs_distro() {
    loggy "${HR}"
    loggy "TASK: woo_get_olfs_distro()"
    local target_dir="${1}"
    loggy "        target_dir: ${target_dir}"
    local olfs_version="${2}"
    loggy "      olfs_version: ${olfs_version}"

    release_url="${RELEASE_HOST}/pub/olfs"
    loggy "release_url: ${release_dir}"

    set -e
    loggy "Cleaning up..."
    rm -fv "${target_dir}/olfs*.tgz"
    rm -fv "${target_dir}/robots-olfs*.tgz"

    target_file="olfs-${olfs_version}-webapp.tgz"
    curl_pull "${release_url}" "${target_file}" "${target_dir}"

    target_file="robots-olfs-${olfs_version}-webapp.tgz"
    curl_pull "${release_url}" "${target_file}" "${target_dir}"

    set +e
    loggy ""
    return 0
}


################################################################################
#
# get_ngap_olfs_distro() - Get the rpm and war files need for a Hyrax NGAP OLFS
#    installation from the identified S3 bucket.
#    $1 - The AWS S3 bucket from which to pull the Hyrax components
#    $2 - The directory into which to place the Hyrax components.
#    $3 - The olfs version number ##.##.##-##
#
function get_ngap_olfs_distro() {
    loggy "${HR}"
    loggy "TASK: get_ngap_olfs_distro()"
    local s3_bucket="${1}"
    loggy "         s3_bucket: ${s3_bucket}"
    local target_dir="${2}"
    loggy "        target_dir: ${target_dir}"
    local olfs_version="${3}"
    loggy "      olfs_version: ${olfs_version}"

    set -e
    loggy "Cleaning up..."
    rm -fv "${target_dir}/ngap*.tgz"

    loggy ""
    s3_pull "${s3_bucket}" \
            "ngap-${olfs_version}-webapp.tgz" \
            "${target_dir}"

    set +e
    loggy ""
    return 0
}


function build_ngap() {
    loggy "${HR}"
    loggy "TASK: build_ngap_rh8()"
#        --no-cache \
        docker build ${NO_CACHE} \
        --platform linux/amd64 \
        --build-arg TOMCAT_VERSION \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --build-arg OLFS_VERSION \
        --tag "${BUILD_VERSION_TAG}" \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        ${DOCKER_NAME}
    loggy ""
    loggy ""
}



function build_hyrax_docker() {
    local docker_name="${1}"

    show_version

    loggy "${HR}"
    loggy "TASK: build_hyrax_docker()"
#        --no-cache \
        docker build ${NO_CACHE} \
        --platform linux/amd64 \
        --build-arg TOMCAT_VERSION \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --build-arg OLFS_VERSION \
        --tag "${BUILD_VERSION_TAG}" \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        ${docker_name}
    loggy ""
    loggy ""
}




#- docker build
#  --build-arg TOMCAT_VERSION
#  --build-arg RELEASE_DATE
#  --build-arg HYRAX_VERSION
#  --build-arg LIBDAP_VERSION
#  --build-arg BES_VERSION
#  --build-arg BUILD_DMRPP_VERSION
#  --tag "${SNAPSHOT_IMAGE_TAG}"
#  --tag "${BUILD_VERSION_TAG}"
#  "${DOCKER_NAME}"

function build_dmrpp_service_docker() {
    local docker_name="${1}"
    export DEPLOYMENT_CONTEXT="${2:-"build_dmrpp"}"
    show_version

    loggy "${HR}"
    loggy "TASK: build_dmrpp_service_docker()"
        docker build ${NO_CACHE} \
        --platform linux/amd64 \
        --build-arg TOMCAT_VERSION \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --build-arg BUILD_DMRPP_VERSION \
        --build-arg DEPLOYMENT_CONTEXT \
        --tag "${BUILD_VERSION_TAG}" \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        ${docker_name}
    loggy ""
    loggy ""
}



function build_hyrax_ncwms_docker() {
    loggy "$HR"
    loggy "build_hyrax_ncwms_docker()"
    loggy ""
    export DOCKER_NAME="hyrax"
    source ./build-rh8
    export SNAPSHOT_IMAGE_TAG="opendap/${DOCKER_NAME}_ncwms:rh8-snapshot"
    export BUILD_VERSION_TAG="opendap/${DOCKER_NAME}_ncwms:rh8-${HYRAX_VERSION}"
    export TOMCAT_VERSION=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    show_version 
    get_tomcat_distro "${DOCKER_NAME}" "${TOMCAT_VERSION}"
    s3_get_besd_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" true 2>&1
    s3_get_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1

    docker build \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --build-arg OLFS_VERSION \
        --build-arg USE_NCWMS=true \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        --tag "${BUILD_VERSION_TAG}" \
        "${DOCKER_NAME}"

    docker image ls -a
    #docker push ${SNAPSHOT_IMAGE_TAG}
    #docker push ${BUILD_VERSION_TAG}
}



function get_platform(){
    local platform=""
    if test `uname -m` = "arm64" ; then platform="--platform linux/amd64"; fi
    echo "${platform}"
}


function start_hyrax(){
    local image_tag="${1}"

    loggy "${HR}"
    loggy "TASK: start_hyrax()"
    loggy "  Starting docker image: ${image_tag}"
    local platform=""
    platform=$(get_platform)
    loggy "               platform: ${platform}"

    docker run \
        -d \
        ${platform} \
        -h hyrax \
        -p 8080:8080 \
        --name=hyrax \
        --env SLEEP_INTERVAL \
        "${image_tag}"

    loggy ""
}

function debug_hyrax(){
    local image_tag="${1}"

    loggy "${HR}"
    loggy "TASK: debug_hyrax()"
    loggy "  Starting docker image: ${image_tag}"
    local platform=""
    platform=$(get_platform)
    loggy "               platform: ${platform}"

    # docker run -d -h hyrax -p 8080:8080 --name=hyrax "${IMAGE_TAG}"
    docker run \
        ${platform} \
        -h hyrax \
        -p 8080:8080 \
        --name=hyrax \
        --env SLEEP_INTERVAL \
        "${image_tag}"
}

function cleanup_build_files(){
    local docker_name="${1}"

    loggy "${HR}"
    loggy "TASK: cleanup_build_files()"
    loggy "    Cleaning ${docker_name}"
    local build_files=""
    build_files="${build_files} ${docker_name}/*.rpm"
    build_files="${build_files} ${docker_name}/olfs*.tgz"
    build_files="${build_files} ${docker_name}/ngap*.tgz"
    build_files="${build_files} ${docker_name}/robots*.tgz"
    build_files="${build_files} ${DOCKER_NAME}/apache*"
    # ls -Gl ${build_files}
    rm -fv ${build_files}
    loggy ""
    loggy "DONE: cleanup_build_files()"
    loggy ""
}

function build_hyrax() {
    local debug="${1}"

    local log_file="build_hyrax.log"
    show_version 2>&1 | tee "${log_file}"

    export TOMCAT_VERSION=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    show_version

    get_tomcat_distro \
        "${DOCKER_NAME}" \
        "${TOMCAT_VERSION}" 2>&1 | tee -a "${log_file}"

    s3_get_besd_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" $debug 2>&1 | tee -a "${log_file}"

    s3_get_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1 | tee -a "${log_file}"

    get_ngap_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1 | tee -a "${log_file}"

    build_hyrax_docker "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}"
    cleanup_build_files "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}"
}

function build_dmrpp_service() {
    local debug="${1}"

    local log_file="build_dmrpp_service.log"
    show_version 2>&1 | tee "${log_file}"

    export TOMCAT_VERSION=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    show_version

    get_tomcat_distro \
        "${DOCKER_NAME}" \
        "${TOMCAT_VERSION}" 2>&1 | tee -a "${log_file}"

    s3_get_besd_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" $debug 2>&1 | tee -a "${log_file}"

    s3_get_build_dmrpp_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${BUILD_DMRPP_VERSION}" 2>&1 | tee -a "${log_file}"

    build_dmrpp_service_docker "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}"
    cleanup_build_files "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}"
}




function build_ngap() {
    local log_file="build_ngap.log"

    export DOCKER_NAME="ngap"
    show_version 2>&1 | tee "${log_file}"


    local tomcat_version="unset"
    tomcat_version=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    get_tomcat_distro \
        "${DOCKER_NAME}" \
        "${tomcat_version}" 2>&1 | tee -a "${log_file}"

    s3_get_besd_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" 2>&1 | tee -a "${log_file}"

    get_ngap_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1 | tee -a "${log_file}"

    build_hyrax_docker "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}"
    cleanup_build_files "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}"
}






function build_olfs_docker() {
    loggy "${HR}"
    loggy "TASK: build_olfs_docker()"
#        --no-cache \
        docker build ${NO_CACHE} \
        --platform linux/amd64 \
        --build-arg TOMCAT_VERSION \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg OLFS_VERSION \
        --tag "${BUILD_VERSION_TAG}" \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        ${DOCKER_NAME}
    loggy ""
    loggy ""
}

function build_olfs() {
    local log_file="build_olfs.log"

    export DOCKER_NAME="olfs"
    show_version 2>&1 | tee "${log_file}"

    local tomcat_version="unset"
    tomcat_version=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    get_tomcat_distro \
        "${DOCKER_NAME}" \
        "${tomcat_version}" 2>&1 | tee -a "${log_file}"

    s3_get_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1 | tee -a "${log_file}"

    build_olfs_docker 2>&1 | tee -a "${log_file}"
#    cleanup_build_files "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}"
}


function build_besd_docker() {
    loggy "${HR}"
    loggy "TASK: build_besd_docker()"
#        --no-cache \
        docker build ${NO_CACHE} \
        --platform linux/amd64 \
        --build-arg RELEASE_DATE \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --tag "${BUILD_VERSION_TAG}" \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        ${DOCKER_NAME}
    loggy ""
    loggy ""
}

function build_besd() {
    local log_file="build_besd.log"

    export DOCKER_NAME="besd"
    show_version 2>&1 | tee "${log_file}"

    s3_get_besd_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" 2>&1 | tee -a "${log_file}"

    build_besd_docker 2>&1 | tee -a "${log_file}"
#    cleanup_build_files "${DOCKER_NAME}" 2>&1 | tee -a "${log_file}"
}


function pull_tag_and_push_image(){
    set -e
    loggy "${HR2}"
    loggy ""
    loggy "pull_tag_push_image()"
    loggy ""
    local target_image_tag="${1}"
    loggy "   target_image_tag: ${target_image_tag}"
    local new_tag="${2}"
    loggy "            new_tag: ${new_tag}"

    loggy ""
    loggy "PULLING: ${target_image_tag}"
    loggy ""
    docker pull ${target_image_tag}
    loggy ""
    loggy "TAGGING AS: ${new_tag}"
    loggy ""
    set -x
    docker tag  ${target_image_tag} ${new_tag}
    set +x
    loggy ""
    loggy "PUSHING: ${new_tag}"
    loggy ""
    set -x
    docker push ${new_tag}
    set +x
    set +e
}

################################################################################
#
# mk_easy_docker_release()
#
# $1 - You must pass a build recipe (aka snapshot.time) file name containing the
# versions and build times.
#
# Reads a snapshot.time file (aka a build recipe) which contains a list of the
# Hyrax Docker files that made up the build. The idea is that is the release
# process is followed then recipe file will look something like:
#
#     libdap4-3.20.11-0 2022-07-21T23:48:51+0000
#     bes-3.20.13-0 2022-07-22T14:41:58+0000
#     olfs-1.18.13-0 2022-07-22T16:36:38+0000
#     hyrax-1.16.8-0 2022-07-22T16:36:38+0000
#
# Note that the build numbers at the end of the version numbers are all 0.
#
# The Docker images for:
#    opendap/hyrax:HYRAX_BUILD_VERSION
#    opendap/hyrax_ncwms:HYRAX_BUILD_VERSION
#    opendap/besd:BES_BUILD_VERSION
#    opendap/olfs:OLFS_BUILD_VERSION
#
# Are pulled from Docker Hub, then they are tagged with the release number. For
# our release that means the the trailing build number (should be "-0") is
# removed from the build version. The image is also tagged with the "latest"
# tag (meaning the most recent release) and then the reults are pushed to Docker
# Hub.
#
# Depends on the functions:
#   - read_build_recipe()
#   - pull_tag_and_push_image()
#   - The HR variable
#
function mk_easy_docker_release(){
    local build_recipe_file="${1}"
    loggy "${HR}"
    loggy ""
    loggy "mk_easy_docker_release() - BEGIN"
    loggy ""
    read_build_recipe "${build_recipe_file}"

    loggy "          RELEASE_DATE: ${RELEASE_DATE}"
    loggy "         HYRAX_VERSION: ${HYRAX_VERSION}"
    local hyrax_major_version=
    hyrax_major_version=$(echo "${HYRAX_VERSION}" | awk '{split($0,a,"."); print a[1]"."a[2];}')
    loggy "   hyrax_major_version: ${hyrax_major_version}"
    local hyrax_release_version=
    hyrax_release_version=$(echo "${HYRAX_VERSION}" | awk '{split($0,a,"-"); print a[1];}')
    loggy " hyrax_release_version: ${hyrax_release_version}"

    loggy "          OLFS_VERSION: ${OLFS_VERSION}"
    local olfs_release_version=
    olfs_release_version=$(echo "${OLFS_VERSION}" | awk '{split($0,a,"-"); print a[1];}')
    loggy "  olfs_release_version: ${olfs_release_version}"

    local bes_version="${4}"
    loggy "           BES_VERSION: ${BES_VERSION}"
    local bes_release_version=
    bes_release_version=$(echo "${BES_VERSION}" | awk '{split($0,a,"-"); print a[1];}')
    loggy "   bes_release_version: ${bes_release_version}"

    pull_tag_and_push_image "opendap/hyrax:${HYRAX_VERSION}" "opendap/hyrax:${hyrax_release_version}"
    pull_tag_and_push_image "opendap/hyrax:${HYRAX_VERSION}" "opendap/hyrax:latest"

    pull_tag_and_push_image "opendap/hyrax_ncwms:${HYRAX_VERSION}" "opendap/hyrax_ncwms:${hyrax_release_version}"
    pull_tag_and_push_image "opendap/hyrax_ncwms:${HYRAX_VERSION}" "opendap/hyrax_ncwms:latest"

    pull_tag_and_push_image "opendap/besd:${BES_VERSION}" "opendap/besd:${bes_release_version}"
    pull_tag_and_push_image "opendap/besd:${BES_VERSION}" "opendap/besd:latest"

    pull_tag_and_push_image "opendap/olfs:${OLFS_VERSION}" "opendap/olfs:${olfs_release_version}"
    pull_tag_and_push_image "opendap/olfs:${OLFS_VERSION}" "opendap/olfs:latest"

    loggy ""
    loggy "mk_easy_docker_release() - END"
    loggy "${HR}"
}

# make_hyrax_release "${RELEASE_DATE}" "${HYRAX_VERSION}" "${OLFS_VERSION}" "${BES_VERSION}" "${LIBDAP_VERSION}"


function travis_hyrax() {
    check_aws
    if test $? -ne 0; then
        loggy "There is a problem with the AWS configuration. Fix it and try again"
        return $status
    fi

    export SNAPSHOT_IMAGE_TAG="opendap/${DOCKER_NAME}:snapshot"
    export BUILD_VERSION_TAG="opendap/${DOCKER_NAME}:${HYRAX_VERSION}"
    export TOMCAT_VERSION=$(get_latest_tomcat_version_number "${TOMCAT_MAJOR_VERSION}")
    show_version
    get_tomcat_distro "${DOCKER_NAME}" "${TOMCAT_VERSION}"
    s3_get_besd_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "el8" \
        "${LIBDAP_VERSION}" \
        "${BES_VERSION}" $ADD_DEBUG 2>&1
    s3_get_olfs_distro \
        "${S3_BUILD_BUCKET}" \
        "${DOCKER_NAME}" \
        "${OLFS_VERSION}" 2>&1
    docker build \
        --build-arg TOMCAT_VERSION \
        --build-arg RELEASE_DATE \
        --build-arg HYRAX_VERSION \
        --build-arg LIBDAP_VERSION \
        --build-arg BES_VERSION \
        --build-arg OLFS_VERSION \
        --tag "${SNAPSHOT_IMAGE_TAG}" \
        --tag "${BUILD_VERSION_TAG}" \
        "${DOCKER_NAME}"

    docker image ls -a

}
